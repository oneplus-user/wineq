# sets the name of the GitHub Actions workflow
name: Python application

# specifies the events that trigger the workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js # setup node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - uses: actions/checkout@v2 # workflow uses latest code from the main branch(provides access to the repository's code)
        with:
          ref: main
      - name: Set up Python 3.11.4 #to set up Python version 3.11.4
        uses: actions/setup-python@v2
        with:
          python-version: 3.11.4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest -v
      # - name: Deploy to Heroku
      #   env:
      #     HEROKU_API_TOKEN: ${{ secrets.HEROKU_API_TOKEN }} #GitHub provides a built-in way to manage secrets within your repository
      #     HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
      #   if: github.ref == 'refs/heads/main' && job.status == 'success'
      #   run: |
      #     git remote add heroku https://heroku:$HEROKU_API_TOKEN@git.heroku.com/$HEROKU_APP_NAME.git
      #     git push heroku HEAD:main -f

      - name: Deploy to Netlify
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }} # Use the name of your Netlify secret
        if: github.ref == 'refs/heads/main' && job.status == 'success'
        run: |
          npm install -g netlify-cli  # Install the Netlify CLI
          netlify login -t $NETLIFY_AUTH_TOKEN  # Log in to Netlify using the token
          netlify deploy --prod  # Deploy the site
